swagger: '2.0'
info:
  description: Api Documentation
  version: '1.0'
  title: Api Documentation
  termsOfService: 'urn:tos'
  contact: {}
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0'
host: 'localhost:8080'
basePath: /
tags:
  - name: vacancy-controller
    description: Operations pertaining to vacancies for jobs in Government
  - name: Vacancy Service
    description: Apis relating to jobs and vacancies
paths:
  /vacancy:
    get:
      tags:
        - vacancy-controller
      summary: Find all vacancies with support for pagination
      operationId: findAll
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Page«Vacancy»'
    post:
      tags:
        - vacancy-controller
      summary: create
      operationId: create
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: vacancy
          description: vacancy
          required: true
          schema:
            $ref: '#/definitions/Vacancy'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Vacancy'
  /vacancy/search:
    post:
      tags:
        - vacancy-controller
      summary: >-
        Search for vacancies by with support for pagination. Search parameters
        are supplied in a json object called VacancySearchParameters which
        contains the properties that can be used to search for vacancies.  Note
        -  VacancySearchParameters.location is mandatory.
      operationId: search
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: searchParameters
          description: The values supplied to perform the search with
          required: true
          schema:
            $ref: '#/definitions/VacancySearchParameters'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Page«Vacancy»'
        '400':
          description: >-
            A bad request has been made such as search parameters not being
            supplied or missing mandatory parameters.
        '500':
          description: >-
            An internal error occurred for example when performing the search
            for vacancies
        '503':
          description: >-
            A service, such as the location service used to transform a place
            into coordinates, is not available.
  '/vacancy/{vacancyId}':
    get:
      tags:
        - vacancy-controller
      summary: Find a specific vacancy
      operationId: findById
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: vacancyId
          in: path
          description: vacancyId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Vacancy'
        '410':
          description: Vacancy closed
          schema:
            $ref: '#/definitions/VacancyError'
    put:
      tags:
        - vacancy-controller
      summary: update
      operationId: update
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: vacancyId
          in: path
          description: vacancyId
          required: true
          type: integer
          format: int64
        - in: body
          name: vacancyUpdate
          description: vacancyUpdate
          required: true
          schema:
            $ref: '#/definitions/Vacancy'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Vacancy'
    delete:
      tags:
        - vacancy-controller
      summary: delete
      operationId: delete
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: vacancyId
          in: path
          description: vacancyId
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Vacancy'
definitions:
  Department:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  Page«Vacancy»:
    type: object
    properties:
      content:
        type: array
        items:
          $ref: '#/definitions/Vacancy'
      first:
        type: boolean
      last:
        type: boolean
      number:
        type: integer
        format: int32
      numberOfElements:
        type: integer
        format: int32
      size:
        type: integer
        format: int32
      sort:
        $ref: '#/definitions/Sort'
      totalElements:
        type: integer
        format: int64
      totalPages:
        type: integer
        format: int32
  Sort:
    type: object
  Vacancy:
    type: object
    required:
      - identifier
      - title
      - description
      - location
      - grade
      - role
      - responsibilities
      - workingHours
      - closingDate
      - contactName
      - contactDepartment
      - contactEmail
      - contactTelephone
      - eligibility
      - salaryMin
    properties:
      id:
        type: integer
        format: int64
      identifier:
        type: integer
        format: int64
      title:
        type: string
      description:
        type: string
      shortDescription:
        type: string
      location:
        type: string
      grade:
        type: string
      role:
        type: string
      responsibilities:
        type: string
      workingHours:
        type: string
      closingDate:
        type: string
        example: 'yyyy-MM-ddTHH:mm:ss.SSSZ e.g. 1976-05-26T00:00:00+0000'
      contactName:
        type: string
      contactDepartment:
        type: string
      contactEmail:
        type: string
      contactTelephone:
        type: string
      eligibility:
        type: string
      salaryMin:
        type: integer
        format: int32
      salaryMax:
        type: integer
        format: int32
      numberVacancies:
        type: integer
        format: int32
      governmentOpeningDate:
        type: string
        example: 'yyyy-MM-ddTHH:mm:ss.SSSZ e.g. 1976-05-26T00:00:00+0000'
      internalOpeningDate:
        type: string
        example: 'yyyy-MM-ddTHH:mm:ss.SSSZ e.g. 1976-05-26T00:00:00+0000'
      publicOpeningDate:
        type: string
        example: 'yyyy-MM-ddTHH:mm:ss.SSSZ e.g. 1976-05-26T00:00:00+0000'
      longitude:
        type: number
        format: double
        example: '51.454929'
      latitude:
        type: number
        format: double
        example: '-2.627811'
      department:
        $ref: '#/definitions/Department'
      displayCscContent:
        type: boolean
        description: Whether or not to display the CS Commissioners Content
  VacancyError:
    type: object
    properties:
      errors:
        type: array
        items:
          type: string
      message:
        type: string
      status:
        type: string
        enum:
          - '410'
  VacancySearchParameters:
    type: object
    required:
      - location
    properties:
      department:
        type: array
        description: id of one or more departments to search vacancies for
        items:
          type: string
      keyword:
        type: string
        description: word found in title or description of vacancy
      location:
        $ref: '#/definitions/Location'
      salaryMin:
        type: integer
        description: the minimum salary
        example: 20000
      salaryMax:
        type: integer
        description: the maximum salary
        example: 30000
    description: The parameters allowed when searching for vacancies
  Location:
    type: object
    properties:
      place:
        type: string
        description: 'One of a full post code, partial post code or name of a city, town, village, hamlet etc'
      radius:
        type: integer
        example: '30'
        description: Distance in miles from Location.place to search for vacancies
